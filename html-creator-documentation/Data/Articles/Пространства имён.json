[
  {
    "Elements": [
      {
        "Type": "Title",
        "Text": "Пространство имён «html_creator_library»"
      }
    ]
  },
  {
    "Type": "Main",
    "Elements": [
      {
        "Type": "SubTitle",
        "Text": "class HTML"
      }
    ]
  },
  {
    "Elements": [
      {
        "Type": "Code",
        "CodeLines": [ "HTML(Body body = null, Head head = null)" ]
      },
      {
        "Type": "Description",
        "Text": "Конструктор класса. Передается body и head html документа для последующего сохранения."
      }
    ]
  },
  {
    "Elements": [
      {
        "Type": "Code",
        "CodeLines": [ "void SetStyles(params Style[] styles)" ]
      },
      {
        "Type": "Description",
        "Text": "Метод для добавления стилей. В styles через запятую можно добавить сколько угодно объектов, которые наследуются от класса Style."
      }
    ]
  },
  {
    "Elements": [
      {
        "Type": "Code",
        "CodeLines": [ "void SaveFile(string path = “../../../../”, string htmlName = null, string cssName = null)" ]
      },
      {
        "Type": "Description",
        "Text": "Метод для сохранения файлов сайта. Path – путь к файлам; htmlName – название html файла (при указании нужно писать в конце «.html»; cssName – Название css файла (при указании нужно писать в конце «.css»."
      }
    ]
  },
  {
    "Type": "Main",
    "Elements": [
      {
        "Type": "SubTitle",
        "Text": "class Head"
      }
    ]
  },
  {
    "Elements": [
      {
        "Type": "Code",
        "CodeLines": [
          "void SetContext(params HeadComponent[] components)"
        ]
      },
      {
        "Type": "Description",
        "Text": "Устанавливает содержимое тега \u003Chead\u003E в html файле. Через запятую можно добавить сколько угодно объектов, которые наследуются от класса HeadComponent."
      }
    ]
  },
  {
    "Type": "Main",
    "Elements": [
      {
        "Type": "SubTitle",
        "Text": "class HtmlAttribute"
      }
    ]
  },
  {
    "Elements": [
      {
        "Type": "Description",
        "Text": "HtmlAttribute в качестве возвращаемого значения используется для того, чтобы перечисленные ниже методы можно было писать в цепочке, например:"
      },
      {
        "Type": "Code",
        "CodeLines": [
          "new Line(new HtmlAttribute().Color(\u0022red\u0022).Size(\u002220px\u0022).Width(\u002290%\u0022))"
        ]
      }
    ]
  },
  {
    "Elements": [
      {
        "Type": "Code",
        "CodeLines": [
          "HtmlAttribute Class(string className)"
        ]
      },
      {
        "Type": "Description",
        "Text": "Добавляет атрибут class=\u0022{className}\u0022."
      }
    ]
  }
]